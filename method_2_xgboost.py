# -*- coding: utf-8 -*-
"""Method 2 - XGBoost.ipynb

Automatically generated by Colab.

Method 2 - eXtreme Gradient-boosted Decision Trees

The code requires installation of xgboost.
"""

import os
import numpy as np
from matplotlib import pyplot as plt
from pathlib import Path
import sklearn
import os.path
from sklearn.model_selection import train_test_split
import keras
import xgboost
from keras.applications.resnet50 import ResNet50
from keras.applications.resnet50 import preprocess_input, decode_predictions
from sklearn import metrics
from xgboost import XGBClassifier
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
import cv2
from google.colab.patches import cv2_imshow
import tensorflow as tf
import pandas as pd
from xgboost import XGBRegressor

type_model = ResNet50(include_top=False, weights='imagenet')
type_features=[]
type_labels=[]
for file in os.listdir('insert path to type data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  type_features.append(type_model.predict(x).flatten())
  type_labels.append(3)

for file in os.listdir('insert path to type data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  type_features.append(type_model.predict(x).flatten())
  type_labels.append(2)

for file in os.listdir('insert path to type data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  type_features.append(type_model.predict(x).flatten())
  type_labels.append(0)

for file in os.listdir('insert path to type data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  type_features.append(type_model.predict(x).flatten())
  type_labels.append(1)

type_features = np.array(type_features)
type_labels = np.array(type_labels)
X_train, X_test, y_train, y_test = train_test_split(type_features, type_labels, test_size=0.2)
type_bst = XGBClassifier(n_estimators = 4, max_depth=2, learning_rate=0.01, objective = 'multi:softmax')

type_bst.fit(X_train, y_train)

preds = type_bst.predict(X_test)

sklearn.metrics.accuracy_score(y_test, preds)

confusion_matrix = metrics.confusion_matrix(y_test, preds, normalize='true')

sklearn.metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=type_bst.classes_).plot()

shape_model = ResNet50(include_top=False, weights='imagenet')
shape_features=[]
shape_labels=[]

for file in os.listdir('insert path to shape data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  shape_features.append(shape_model.predict(x).flatten())
  shape_labels.append(0)

for file in os.listdir('insert path to shape data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  shape_features.append(shape_model.predict(x).flatten())
  shape_labels.append(1)

for file in os.listdir('insert path to shape data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  shape_features.append(shape_model.predict(x).flatten())
  shape_labels.append(2)

for file in os.listdir('insert path to shape data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  shape_features.append(shape_model.predict(x).flatten())
  shape_labels.append(3)

shape_features = np.array(shape_features)
shape_labels = np.array(shape_labels)
shape_data = shape_features
X_train, X_test, y_train, y_test = train_test_split(shape_features, shape_labels, test_size=0.2)
shape_bst = XGBClassifier(n_estimators = 4, max_depth=2, learning_rate=0.01, objective = 'multi:softmax')

shape_bst.fit(X_train, y_train)

preds = shape_bst.predict(X_test)

print('accuracy:', sklearn.metrics.accuracy_score(y_test, preds))
confusion_matrix = metrics.confusion_matrix(y_test, preds, normalize='true')

operating_voltage_model = ResNet50(include_top=False, weights='imagenet')
operating_voltage_features=[]
operating_voltage_labels=[]

for file in os.listdir('insert path to operating voltage data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  operating_voltage_features.append(operating_voltage_model.predict(x).flatten())
  operating_voltage_labels.append(0)

for file in os.listdir('insert path to operating voltage data directory'):
  img_path = 'insert path to subcategory'+file
  img = keras.utils.load_img(img_path, target_size=(224, 224))
  x = keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  operating_voltage_features.append(operating_voltage_model.predict(x).flatten())
  operating_voltage_labels.append(1)

operating_voltage_features_features = np.array(operating_voltage_features)
operating_voltage_labels = np.array(operating_voltage_labels)
operating_voltage_data = operating_voltage_features
X_train, X_test, y_train, y_test = train_test_split(operating_voltage_features, operating_voltage_labels, test_size=0.2)
operating_voltage_bst = XGBClassifier(n_estimators = 4, max_depth=2, learning_rate=1, objective = 'binary:logistic')

operating_voltage_bst.fit(X_train, y_train)

preds = operating_voltage_bst.predict(X_test)

print('accuracy:', sklearn.metrics.accuracy_score(y_test, preds))
confusion_matrix = metrics.confusion_matrix(y_test, preds, normalize='true')

sklearn.metrics.ConfusionMatrixDisplay(confusion_matrix=confusion_matrix, display_labels=operating_voltage_bst.classes_).plot()

text_directory = Path('insert path to magnification text data directory')
image_directory = Path('insert path to magnification image data directory')
magnifications_initial=[]
ordered_files=[]

magnification_feature_model = ResNet50(include_top=False, weights='imagenet')
magnification_features=[]
for i in range(len(os.listdir(text_directory))+1):
  if i == 0:
    continue
  if (i<=103):
    filename = str(i)+"File.jpeg"
  if (i>103):
    filename = str(i)+"File .jpeg"
  with open(os.path.join(image_directory, filename), 'rb'):
    img_path = os.path.join(image_directory, filename)
    #print(img_path)
    img = keras.utils.load_img(img_path, target_size=(224, 224))
    x = keras.utils.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = preprocess_input(x)
    magnification_features.append(magnification_feature_model.predict(x).flatten())

text_directory = Path('insert path to magnification text data directory')
magnifications_initial=[]
for i in range(len(os.listdir(text_directory))+1):
  if i == 0:
    continue
  if (i<=103):
    name = str(i)+"File.TXT"
  if (i>103):
    name = str(i)+"File .TXT"
  with open(os.path.join(text_directory, name)) as f:
    for line in f:
      if ('Magnification' in line and "SubMagnification" not in line):
        mag = float(line.split('=')[1])
        magnifications_initial.append(mag)

magnifications_logged = np.log(magnifications_initial)

magnification_features = pd.DataFrame(magnification_features)
magnifications = pd.Series(magnifications_logged, name='Magnification')
magnification_images = pd.concat([magnification_features, magnifications], axis=1)

data = magnification_images

X = data.drop('Magnification', axis=1)
y = data['Magnification']

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)
magnification_bst = XGBRegressor(n_estimators = 50, max_depth = 5, learning_rate = 0.01)

magnification_bst.fit(X_train, y_train)

preds = magnification_bst.predict(X_test)

mse = sklearn.metrics.mean_squared_error(y_test, preds)
print('mse:', mse)

import math
y_test_array = np.array(y_test)
scaled_preds = np.zeros(len(preds))
scaled_y_test = np.zeros(len(y_test_array))
for i in range(len(preds)-1):
  scaled_preds[i] = math.exp(preds[i])
  scaled_y_test[i] = math.exp(y_test_array[i])

mse_scaled = sklearn.metrics.mean_squared_error(scaled_y_test, scaled_preds)
print(mse_scaled)

#change to output desired categories
def identify_type(type_prediction):
  global type_material
  if type_prediction == 0:
    type_material = 'MIL-101 Cr MOF'
  elif type_prediction == 1:
    type_material = 'MIL-101 Fe MOF'
  elif type_prediction == 2:
    type_material = 'NU-1000 MOF'
  else:
    type_material = 'UiO-66 MOF'

def identify_shape(shape_prediction):
  global shape
  if shape_prediction == 0:
    shape = 'Pyramidal'
  elif shape_prediction == 1:
    shape = 'Rod-like'
  elif shape_prediction == 2:
    shape = 'Octahedral'
  else:
    shape = 'Cubic'

def identify_operating_voltage(operating_voltage_prediction):
  global operating_voltage
  if operating_voltage_prediction == 0:
    operating_voltage = '5 kV'
  else:
    operating_voltage = '15 kV'

def output_magnification(magnification_prediction):
  global magnification
  magnification = int(math.exp(magnification_prediction[0]))

def descriptor():
  print(f'This material is a {type_material} with a shape that is {shape}. The image was taken at an operating voltage of {operating_voltage} and magnification of {magnification}.')

img_path = 'insert path to image'
image = cv2.imread(img_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
plt.imshow(image.astype(int))
plt.show()
img = keras.utils.load_img(img_path, target_size=(224, 224))
x = keras.utils.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)
calc_type_features = type_model.predict(x).flatten()
calc_shape_features = shape_model.predict(x).flatten()
calc_operating_voltage_features = operating_voltage_model.predict(x).flatten()
calc_magnification_features = magnification_feature_model.predict(x).flatten()

type_prediction = type_bst.predict([calc_type_features])
shape_prediction = shape_bst.predict([calc_shape_features])
operating_voltage_prediction = operating_voltage_bst.predict([calc_operating_voltage_features])
magnification_prediction = magnification_bst.predict([calc_magnification_features])

identify_type(type_prediction)
identify_shape(shape_prediction)
identify_operating_voltage(operating_voltage_prediction)
output_magnification(magnification_prediction)
descriptor()
